inline const timer_time_decay = .02;

inline const timer_x = -5;
inline const timer_y = 4;
inline const timer_width = 8;
inline const timer_height = .5;

//Create the behavior.
createBehavior!("timer");

//Store the time.
setVal!("timer", "time", 1);
setMut!("timer", "time");

//Reduce the time every frame, or reset it if we aren't grounded.
setValAction!("timer", "time", {
    //Reset the timer if they died.
    const dead = {
        state = 0;

        selectBehavior!("death", {
            state = getValSelect!("death.dead");
        });
    };

    if(!getVal!("timer", "base.gravity.grounded") || dead) {
        state = 1;
    } else {
        state = time - timer_time_decay;
    }
});

//Render the timer.
behaviorCustom!("timer", {
    //Render the timer outline.
    polygon({
        const x = timer_x;
        const y = timer_y;
        const x_scale = timer_width;
        const y_scale = timer_height;

        state = (x, y) + x_scale*[(-1/2, 0), (1/2, 0), (1/2, 0), (-1/2, 0)] + y_scale*[(0, -1/2), (0, -1/2), (0, 1/2), (0, 1/2)];
    });

    //Render the timer itself.
    polygon({
        //Adjust the scale to match the time.
        const x_scale = timer_width*getVal!("timer", "time", true);
        const y_scale = timer_height;

        //Adjust x to the new size.
        const x = timer_x - (timer_width - x_scale)/2;
        const y = timer_y;

        state = (x, y) + x_scale*[(-1/2, 0), (1/2, 0), (1/2, 0), (-1/2, 0)] + y_scale*[(0, -1/2), (0, -1/2), (0, 1/2), (0, 1/2)];
    });
});

//Finalize the behavior.
finalizeBehavior!("timer");