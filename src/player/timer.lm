inline const timer_time_decay = .016;

inline const timer_x = .4;
inline const timer_y = -3;
inline const timer_width = 8.4;
inline const timer_height = .5;
inline const timer_degree = 1/5;

//Create the behavior.
createBehavior!("timer", {
    //Store the time.
    setVal!("time", 1);
    setMut!("time");

    //Reduce the time every frame, or reset it if we aren't grounded.
    setValAction!("time", {
        //Reset the timer if they died.
        const dead = {
            state = 0;

            selectBehavior!("death", {
                state = getValSelect!("death.dead");
            });
        };

        if(!getVal!("base.gravity.grounded") || dead) {
            state = 1;
        } else {
            state = time - timer_time_decay;
        }
    });

    //Render the timer.
    behaviorCustom!({
        //Render the timer outline.
        display color = c_9;
        display fill = 1;
        display stroke = 0;
        display thickness = 0;

        polygon({
            const thickness = .025 * 2;
        
            const x = timer_x;
            const y = timer_y;
            const x_scale = timer_width+thickness;
            const y_scale = timer_height+thickness;

            state = (x, y) + x_scale*[(-1/2, 0), (1/2, 0), (1/2, 0), (-1/2, 0)] + y_scale*[(0, -1/2), (0, -1/2), (0, 1/2), (0, 1/2)] + [(-timer_degree, 0), (0, 0), (-timer_degree, 0), (0, 0)];
        });
    
        //Render the timer background.
        display color = c_6;
        display fill = 1;
        display stroke = 0;
        display thickness = 0;

        polygon({
            const x = timer_x;
            const y = timer_y;
            const x_scale = timer_width;
            const y_scale = timer_height;

            state = (x, y) + x_scale*[(-1/2, 0), (1/2, 0), (1/2, 0), (-1/2, 0)] + y_scale*[(0, -1/2), (0, -1/2), (0, 1/2), (0, 1/2)] + [(-timer_degree, 0), (0, 0), (-timer_degree, 0), (0, 0)];
        });

        //Render the timer itself.
        display color = c_5;
        display fill = 1;
        display stroke = 0;
        display thickness = 0;

        polygon({
            //Adjust the scale to match the time.
            const x_scale = timer_width*getVal!("time", true);
            const y_scale = timer_height;

            //Adjust x to the new size.
            const x = timer_x - (timer_width - x_scale)/2;
            const y = timer_y;

            state = (x, y) + x_scale*[(-1/2, 0), (1/2, 0), (1/2, 0), (-1/2, 0)] + y_scale*[(0, -1/2), (0, -1/2), (0, 1/2), (0, 1/2)] + [(-timer_degree, 0), (0, 0), (-timer_degree, 0), (0, 0)];
        });
    });
});