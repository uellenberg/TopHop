inline const gravity_val = .25;

//Create the gravity behavior.
createBehavior!("gravity", {
    //Allow gravity's direction to be changed.
    setVal!("mul", 1);
    setMut!("mul");

    //Apply gravity every frame, based on the multiplier.
    setValAction!("base.transform.y", {
        //Get the mul (true means to use the stored version, since we don't need the current version).
        const mul = getVal!("mul", true);

        //Apply the gravity.
        state = y - (gravity_val * mul);
    });

    //Colliders are -300, so run at -290 to go after them.
    setVal!("grounded", 0);
    setInline!("grounded");

    setValAction!("grounded", {
        //If they are colliding with something, then they are grounded.
        state = getVal!("base.transform.collision_y") != 0;
    }, -290);

    //Reset gravity if the player died or the game ended.
    setValAction!("mul", {
        state = mul;

        const ended = {
            state = 0;

            selectBehavior!("game_manager", {
                state = getValSelect!("game_manager.ended");
            });
        };

        if(getVal!("base.death.dead") || ended) {
            state = 1;
        }
    });
    
    //Create an action that resets gravity when the game starts (see gameManager.lm).
    noRegisterSetValAction!("mul", {
        state = mul;

        const game = {
            state = 0;

            selectBehavior!("game_manager", {
                state = getValSelect!("game_manager.game");
            });
        };

        //Only reset if the game is not running.
        if(!game) {
            state = 1;
        }
    }, "g_ame4");

    //Create a "h_op" action that only runs on user input, which reverses gravity.
    noRegisterSetValAction!("mul", {
        const game = {
            state = 0;

            selectBehavior!("game_manager", {
                state = getValSelect!("game_manager.game");
            });
        };
    
        //Only reverse gravity if they are grounded and the game is running.
        if(getVal!("grounded") && game) {
            state = -mul;
        } else {
            state = mul;
        }
    }, "h_op");
});