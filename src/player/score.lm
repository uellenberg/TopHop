inline const rounded_digits = 3;
//Uses end_x from end.lm.

inline const score_x = 0;
inline const score_y = -4;
inline const score_width = 8;
inline const score_height = 1.25;
inline const score_degree = 3/5;

//Create the behavior.
createBehavior!("score", {
    //Store the amount of full games played.
    setVal!("games", 0);
    setMut!("games");

    //Make the full score (full games + percent of the current game) inline.
    setVal!("score", 0);
    setInline!("score");

    //Store the high-score.
    setVal!("high_score", 0);
    setMut!("high_score");

    //Update the games if the player is dead or the game ended.
    setValAction!("games", {
        if(getVal!("base.death.dead")) {
            state = 0;
        } else if(getVal!("base.game_end.ended")) {
            state = games + 1;
        } else {
            state = games;
        }
    });

    //Update the score to the games + the percent of the game played.
    setValAction!("score", {
        const viewport_x = {
            state = 0;

            selectBehavior!("window", {
                state = getValSelect!("transform.x");
            });
        };

        const games = getVal!("games");
        const percent = viewport_x/end_x;

        //Lock the percent to 0-1.
        const locked_percent = min(1, max(0, percent));

        //Return the games + percent.
        state = games + percent;
    }, -295, true, true);

    //Update the high score to the highest score.
    setValAction!("high_score", {
        state = max(high_score, getVal!("score", "score"));
    });

    behaviorCustom!({
        //Store the score in a global variable.
        export const s_core = round(getVal!("score"), rounded_digits)*1000;
        export const h_score = round(getVal!("high_score"), rounded_digits)*1000;

        //Create points for the scores.
        display label = "Score: ${s_core}";
        display hidden = true;
        display color = c_9;
        display outline = false;

        point (.25, -3.75);

        display label = "High Score: ${h_score}";
        display hidden = true;
        display color = c_9;
        display outline = false;

        point (.25, -4.25);
        
        //Render the score background outline.
        display color = c_9;
        display fill = 1;
        display stroke = 0;
        display thickness = 0;

        polygon({
            const thickness = .025 * 2;

            state = (score_x, score_y) + (score_width+thickness)*[(-1/2, 0), (1/2, 0), (1/2, 0), (-1/2, 0)] + (score_height+thickness)*[(0, -1/2), (0, -1/2), (0, 1/2), (0, 1/2)] + [(score_degree, 0), (0, 0), (score_degree, 0), (0, 0)];
        });

        //Render a background for the scores.
        display color = c_6;
        display fill = 1;
        display stroke = 0;
        display thickness = 0;

        polygon({
            state = (score_x, score_y) + score_width*[(-1/2, 0), (1/2, 0), (1/2, 0), (-1/2, 0)] + score_height*[(0, -1/2), (0, -1/2), (0, 1/2), (0, 1/2)] + [(score_degree, 0), (0, 0), (score_degree, 0), (0, 0)];
        });
    });
});