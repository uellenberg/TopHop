inline const rounded_digits = 3;
//Uses end_x from end.lm.

inline const score_x = 0;
inline const score_y = -5.5;
inline const score_width = 14;
inline const score_height = 2;

//Create the behavior.
createBehavior!("score");

//Store the amount of full games played.
setVal!("score", "games", 0);
setMut!("score", "games");

//Make the full score (full games + percent of the current game) inline.
setVal!("score", "score", 0);
setInline!("score", "score");

//Store the high-score.
setVal!("score", "high_score", 0);
setMut!("score", "high_score");

//Update the games if the player is dead or the game ended.
setValAction!("score", "games", {
    if(getVal!("score", "base.death.dead")) {
        state = 0;
    } else if(getVal!("score", "base.game_end.ended")) {
        state = games + 1;
    } else {
        state = games;
    }
});

//Update the score to the games + the percent of the game played.
setValAction!("score", "score", {
    const viewport_x = {
        state = 0;

        selectBehavior!("window", {
            state = getValSelect!("transform.x");
        });
    };

    const games = getVal!("score", "games");
    const percent = viewport_x/end_x;

    //Lock the percent to 0-1.
    const locked_percent = min(1, max(0, percent));

    //Return the games + percent.
    state = games + percent;
}, -295, true, true);

//Update the high score to the highest score.
setValAction!("score", "high_score", {
    state = max(high_score, getVal!("score", "score"));
});

behaviorCustom!("score", {
    //Store the score in a global variable.
    export const s_core = round(getVal!("score", "score"), rounded_digits);
    export const h_score = round(getVal!("score", "high_score"), rounded_digits);

    //Create points for the scores.
    display label = "Score: ${s_core}";
    display hidden = true;
    display color = c_5;
    
    point (0, -5.25);
    
    display label = "High Score: ${h_score}";
    display hidden = true;
    display color = c_5;
    
    point (0, -5.75);

    //Render a background for the scores.
    display color = c_6;
    display fill = 1;
    display stroke = 0;
    display thickness = 0;
    
    polygon({
        state = (score_x, score_y) + score_width*[(-1/2, 0), (1/2, 0), (1/2, 0), (-1/2, 0)] + score_height*[(0, -1/2), (0, -1/2), (0, 1/2), (0, 1/2)];
    });
});

//Finalize the behavior.
finalizeBehavior!("score");